1 JANE 2
1 MARIA 2
3 PET STE 2
3 JANE MARIA 2
3 JANE MARIANA 2
3 A ZZZ 
0

OUTPUT:
0
1
2
0

1 JANE 2
1 MARIA 2
1 B 2
1 C 2
1 A 2
3 B MARIA 2
0

1 JANE 2
1 MARIA 2
1 B 2
1 C 2
1 A 2
3 B MARIA 2
0

1 C 2
1 B 2
1 A 2
1 G 2
1 H 2
3 C G 2
3 C H 2
3 A I 2
0

output:
1
2
5

1 AB 2
1 AC 2
1 ABC 2
1 DAF 2
1 FAD 2
1 GAD 2
1 ZZZ 2
1 ZZZZ 2
1 ACH 2
3 GA ZZ 2
3 AA ZZ 2
3 AA DA 0 
3 ABCD ADSF 0
1 ADSAD 1
1 PETE 1
2 FEMA 2
3 FEMA HEJ 2
3 LOL PETE 0
0

output:
1
7
4
2
1
0

1 C 2
1 Q 2
1 QA 2
1 AG 2
1 AGJ 2
1 QABC 2
1 RS 2
1 AB 2
1 RS 2
1 Q 2

BOYS:
0
1 JOSHUA 1
1 PETER 1
3 PET STE 1
0

 /* public Baby successor(String key) { 

    System.out.println("in successor, searching for successor to : " + key);

    Node vPos = find(root, key);
    return vPos == null ? null : successor(vPos);
    //return successor(vPos);
  }

  public Baby predecessor(String key) { 
    Node vPos = find(root, key);
    //return vPos == null ? null : predecessor(vPos);
    return predecessor(vPos);
  }*/

 /* public int countSubMap(String start, String end){

    if(root == null)
      return 0;


    Node leftBound = root, rightBound = root;
    int cutOffBoundLeft = 0, cutOffBoundRight = 0;    

    // Look for node that is smaller than start

    while(leftBound.left != null && leftBound.left.value.babyName.compareTo(start) >= 0){

      leftBound = leftBound.left;

    }

     // Look for node that is bigger than end
    while(rightBound.right != null && rightBound.right.value.babyName.compareTo(end) < 0){

      rightBound = rightBound.right;

    }

    // If still nodes left, cut them of
    if(leftBound.left != null)
      cutOffBoundLeft += size(leftBound.left);

    if(rightBound.right != null)
      cutOffBoundRight = size(rightBound.right);

 //   System.out.println("Leftbound is at " + leftBound.value);
  //  System.out.println("RightBound is at " + rightBound.value);

    // CORNER CASE with only two nodes 
    if(root.left == null){

      /*System.out.println("yes");
      while(leftBound.value.babyName.compareTo(start) >= 0 && leftBound.right != null)
        leftBound = leftBound.right;
      //System.out.println("root left null");

      if(leftBound.value.babyName.compareTo(start) < 0 && leftBound.right != null){
       // System.out.println("start is not in interval");
        leftBound = leftBound.right;
      
        if(leftBound.value.babyName.compareTo(start) < 0){
         // System.out.println("not this time eitehr");
          return 0;
        } else {
          return 1;
        }

      }

    }

    return size(root) - cutOffBoundLeft - cutOffBoundRight;
 
  }*/




  /*
  protected Node delete(Node node, String key) {
    if (node == null)  return node;              // cannot find the item to be deleted

    if (node.value.babyName.equals(key)) {                          // this is the node to be deleted
      if (node.left == null && node.right == null)                   // this is a leaf
        node = null;                                      // simply erase this node
      else if (node.left == null && node.right != null) {   // only one child at right
        Node temp = node;
        node.right.parent = node.parent;
        node = node.right;                                                 // bypass T
        temp = null;
      }
      else if (node.left != null && node.right == null) {    // only one child at left
        Node temp = node;
        node.left.parent = node.parent;
        node = node.left;                                                  // bypass T
        temp = null;
      }
      else {                                 // has two children, find successor
        Baby successorV = successor(node.value.babyName);
        node.value = successorV;         // replace this key with the successor's key
        node.right = delete(node.right, successorV.babyName);      // delete the old successorV
      }
    }
    else if (node.value.babyName.compareTo(key) > 0)                                   // search to the right
      node.right = delete(node.right, key);
    else                                                   // search to the left
      node.left = delete(node.left, key);
    return node;                                          // return the updated BST
  }*/


  /*
  protected Node delete(Node node, String key) {
    if (node == null)  return node;              // cannot find the item to be deleted

    if (node.value.babyName.equals(key)) {                          // this is the node to be deleted
      if (node.left == null && node.right == null)                   // this is a leaf
        node = null;                                      // simply erase this node
      else if (node.left == null && node.right != null) {   // only one child at right
        Node temp = node;
        node.right.parent = node.parent;
        node = node.right;                                                 // bypass T
        temp = null;
      }
      else if (node.left != null && node.right == null) {    // only one child at left
        Node temp = node;
        node.left.parent = node.parent;
        node = node.left;                                                  // bypass T
        temp = null;
      }
      else {                                 // has two children, find successor
        Baby successorV = successor(node.value.babyName);
        node.value = successorV;         // replace this key with the successor's key
        node.right = delete(node.right, successorV.babyName);      // delete the old successorV
      }
    }
    else if (node.value.babyName.compareTo(key) > 0)                                   // search to the right
      node.right = delete(node.right, key);
    else                                                   // search to the left
      node.left = delete(node.left, key);
    return node;                                          // return the updated BST
  }*/


1 LIGHTNING 2
1 EZEKIEL 1
1 ZEKE 1
1 XAVIER 1
1 ROSLIND 2
3 A Z 2
1 THUNDER 1
1 FELINA 2
3 A ZEKE 1
1 TRAVIS 1
1 SANTA 1
3 ZEKE ZEKEA 1
1 ZACHARY 1
1 PETE 1
3 ZA ZACHARYA 1
1 DESTINY 2
1 EVELYN 2
3 T Z 2
1 AHRI 2
1 AKALI 2
1 ANNIE 2
1 ANIVIA 2
3 ANNIE EVELYN 2
1 AATROX 1
1 SEVEN 1
3 A Z 1
3 A Z 1
3 A Q 2
3 A Z 1
3 A B 2
3 A B 1
3 A Z 1
3 A Z 2
0

OUTPUT : 

2
3
1
1
0
2
8
8
8
8
4
1
8
9

1 ALPHB 1
3 ALPHB M 1
1 ALPHA 1
3 ALPGZ ALPHC 1
1 LEON 1
1 LOSER 1
1 LENO 1
1 CAITLYN 2
1 AATROX 1
3 A Z 1
0

OUTPUT: 
0
1
2
6


** TEST CASES FOR SUB D

1 LIGHTNING 2
1 EZEKIEL 1
1 ZEKE 1
1 XAVIER 1
1 ROSLIND 2
2 XAVIER
3 A Z 2
1 THUNDER 1
1 FELINA 2
3 A ZEKE 1
2 FELINA
1 TRAVIS 1
1 SANTA 1
2 THUNDER
3 ZEKE ZEKEA 1
1 ZACHARY 1
1 PETE 1
3 ZA ZACHARYA 1
1 DESTINY 2
1 EVELYN 2
2 TRAVIS
3 T Z 2
1 AHRI 2
1 AKALI 2
1 ANNIE 2
1 ANIVIA 2
3 ANNIE EVELYN 2
1 AATROX 1
1 SEVEN 1
2 AKALI
2 PETE
2 EVELYN
3 A Z 1
2 SANTA
3 A Z 1
2 SEVEN
3 A Q 2
2 AATROX
3 A Z 1
2 ZACHARY
2 ZEKE 
2 EZEKIEL
3 A B 2
3 A B 1
3 A Z 1
2 ANIVIA
3 A Z 2
0

EXPECTED OUTPUT:
2
2
1
1
0
2
4
3
5
1
3
0
0
5


VISUALGO:
1 8 2
1 10 2
1 9 2
1 14 2
1 15 2
1 18 2
1 2 2
1 5 2
1 16 2
1 20 2
2 10 
0


AVL TREE D :

1 C 2
1 Q 2
1 QA 2
1 AG 2
1 AGJ 2
1 QABC 2
1 RS 2
1 AB 2
2 C
0
